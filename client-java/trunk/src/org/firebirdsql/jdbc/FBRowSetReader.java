/*   The contents of this file are subject to the Mozilla Public
 *   License Version 1.1 (the "License"); you may not use this file
 *   except in compliance with the License. You may obtain a copy of
 *   the License at http://www.mozilla.org/MPL/
 *   Alternatively, the contents of this file may be used under the
 *   terms of the GNU Lesser General Public License Version 2 or later (the
 *   "LGPL"), in which case the provisions of the GPL are applicable
 *   instead of those above. You may obtain a copy of the Licence at
 *   http://www.gnu.org/copyleft/lgpl.html
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    relevant License for more details.
 *
 *    This file was created by members of the firebird development team.
 *    All individual contributions remain the Copyright (C) of those
 *    individuals.  Contributors to this file are either listed here or
 *    can be obtained from a CVS history command.
 *
 *    All rights reserved.

 */

package org.firebirdsql.jdbc;


// imports --------------------------------------
import javax.sql.RowSetReader;
import javax.sql.RowSetInternal;

/**
 *
 *   @see <related>
 *   @author David Jencks (davidjencks@earthlink.net)
 *   @version $ $
 */


import java.sql.*;

/**
 * <P>An object implementing the RowSetReader interface may be registered with
 * a RowSet object that supports the reader/writer paradigm.  A RowSetReader object
 * is called by a rowset to produce a new set of rows which will become
 * the rowset's contents.
 */

public class FBRowSetReader implements RowSetReader {

  /**
   * <P>Read the new contents of a rowset.  This method is invoked internally
   * by the RowSet.execute() method for rowsets that support the
   * reader/writer paradigm.
   *
   * <P>The readData() method uses the RowSet.insertRow() or RowSet.populate()
   * methods to add rows to the caller.  In general, any of the caller's
   * methods may be called by the reader with one exception, calling
   * execute() will throw an SQLException since execute may not be called
   * recursively.  Also, rowset events, such as RowSetChanged, etc. are not
   * generated by RowSet methods invoked by a reader.
   *
   * @param caller the rowset that called the reader
   * @exception SQLException if a database-access error occurs
   */
    public void readData(RowSetInternal caller) throws SQLException {
        throw new SQLException("Not yet implemented");
    }


}
