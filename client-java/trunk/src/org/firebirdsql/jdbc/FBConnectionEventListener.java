/*   The contents of this file are subject to the Mozilla Public
 *   License Version 1.1 (the "License"); you may not use this file
 *   except in compliance with the License. You may obtain a copy of
 *   the License at http://www.mozilla.org/MPL/
 *   Alternatively, the contents of this file may be used under the
 *   terms of the GNU Lesser General Public License Version 2 or later (the
 *   "LGPL"), in which case the provisions of the GPL are applicable
 *   instead of those above. You may obtain a copy of the Licence at
 *   http://www.gnu.org/copyleft/lgpl.html
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    relevant License for more details.
 *
 *    This file was created by members of the firebird development team.
 *    All individual contributions remain the Copyright (C) of those
 *    individuals.  Contributors to this file are either listed here or
 *    can be obtained from a CVS history command.
 *
 *    All rights reserved.

 */

package org.firebirdsql.jdbc;


// imports --------------------------------------
import javax.sql.ConnectionEvent;
import javax.sql.ConnectionEventListener;


/**
 *
 *   @see <related>
 *   @author David Jencks (davidjencks@earthlink.net)
 *   @version $ $
 */


/**
<P>
A ConnectionEventListener is an object that registers to receive
events generated by a PooledConnection.
<P>
The ConnectionEventListener interface is implemented by a
connection pooling component.  A connection pooling component will
usually be provided by a JDBC driver vendor, or another system software
vendor.  A ConnectionEventListener is notified by a JDBC driver when
an application is finished using its Connection object.  This event occurs
after the application calls close on its representation of the
PooledConnection.  A ConnectionEventListener is also notified when a
Connection error occurs due to the fact that the PooledConnection is unfit
for future use---the server has crashed, for example.  The listener is
notified, by the JDBC driver, just before the driver throws an
SQLException to the application using the PooledConnection.
*/

public class FBConnectionEventListener implements ConnectionEventListener {

  /**
   * <P>Invoked when the application calls close() on its
   * representation of the connection.
   *
   * @param event an event object describing the source of
   * the event
   */
    public void connectionClosed(ConnectionEvent event) {
    }


  /**
   * <p>Invoked when a fatal connection error occurs, just before
   * an SQLException is thrown to the application.
   *
   * @param event an event object describing the source of
   * the event
   */
    public void connectionErrorOccurred(ConnectionEvent event) {
    }


 }





