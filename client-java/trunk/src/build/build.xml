<?xml version="1.0"?>

<!-- ======================================================================= -->
<!-- JDBC-JCA Driver for Firebird build file                                -->
<!-- ======================================================================= -->

<!--NOTE IMPORTANT  to run the junit tests you need to create a directory dbsrc
 next to db and create an empty dialect 3 database in it called fbmctest.gdb.
Sorry, I haven'tbeen able to create a dialect 3 db dynamically yet. -->

<project name="FirebirdSQL" default="jmx.jar" basedir="../..">

    <property name="Name" value="FirebirdSQL"/>
    <property name="name" value="firebirdsql"/>
    <property name="version" value="0.0"/>

    <property name="lib.dir" value="${basedir}/lib"/>
    <property name="src.dir" value="${basedir}/src"/>
    <property name="src.docs.dir" value="${src.dir}/docs"/>

    <property name="src.resources.dir" value="${src.dir}/resources"/>
    <property name="src.lib.dir" value="${src.dir}/lib"/>
    <property name="build.dir" value="${basedir}/build"/>
    <property name="build.bin.dir" value="${build.dir}/bin"/>
    <property name="build.lib.dir" value="${build.dir}/lib"/>
    <property name="build.classes.dir" value="${build.dir}/classes"/>
    <property name="build.docs.dir" value="${build.dir}/docs"/>
    <property name="build.javadocs.dir" value="${build.dir}/docs/api"/>
    <property name="build.jar-ra.dir" value="${build.dir}/jar"/>
    <property name="dist.dir" value="dist"/>
    <property name="external.dir" value="${dist.dir}/external"/>
    <property name="db.dir" value="${basedir}/db"/>
    <property name="dbsrc.dir" value="${basedir}/dbsrc"/>
    


    <property name="classpath" value="${build.classes.dir};${src.lib.dir}/jta-spec1_0_1.jar;${src.lib.dir}/connector.jar;${src.lib.dir}/jdbc-3_0-pfd2-classes.zip;${src.lib.dir}/jaas.jar"/>
    <property name="packages" value="firebirdsql.jdbc, firebirdsql.jca"/>

    <property name="build.compiler" value="classic"/>

    <!--available property="jdk1.3+" classname="java.lang.StrictMath" /-->

    <path id="cp">
      <pathelement location="${build.classes.dir}"/>
      <pathelement location="${src.lib.dir}/jta-spec1_0_1.jar"/>
      <pathelement location="${src.lib.dir}/connector.jar"/>
      <pathelement location="${src.lib.dir}/jdbc-3_0-pfd2-classes.zip"/>
      <pathelement location="${src.lib.dir}/jaas.jar"/>
      <pathelement location="${src.lib.dir}/jmxri.jar"/>
      <pathelement location="${lib.dir}/junit.jar"/>
    </path> 


  <!-- =================================================================== -->
  <!-- Prepares the build directory                                        -->
  <!-- =================================================================== -->
  <target name="prepare">
    <mkdir dir="${build.dir}"/>
    <mkdir dir="${dist.dir}"/>
    <mkdir dir="${build.docs.dir}"/>
    <mkdir dir="${basedir}/db"/>
  </target>

  <!-- =================================================================== -->
  <!-- Compiles the source code                                            -->
  <!-- =================================================================== -->
  <target name="compile" depends="prepare">
    <mkdir dir="${build.classes.dir}"/>
    <depend srcDir="${src.dir}" 
           destDir="${build.classes.dir}"
           cache="${build.classes.dir}"/>
           
    <javac srcdir="${src.dir}"
           destdir="${build.classes.dir}"
           debug="off"
           deprecation="off"
           optimize="on"
           includes="org/**"
           excludes="**/temp*"
    >
      <classpath refid="cp"/>
    </javac>
  </target>
  <!-- =================================================================== -->
  <!-- Creates the jar archives                                            -->
  <!-- =================================================================== -->
  <target name="jar-ra" depends="compile">
    <!--copy todir="${build.classes.dir}">
        <fileset dir="${src.resources.dir}"/>
    </copy-->

    <mkdir dir="${build.jar-ra.dir}"/>
    <jar jarfile="${build.jar-ra.dir}/firebirdsql.jar"
         basedir="${build.classes.dir}"
         includes="org/firebirdsql/**"
    />
  </target>

  <target name="junit" depends="jmx.jar">
    <delete file="${db.dir}/fbmctest.gdb"/>
    <copy todir="${db.dir}">
        <fileset dir="${dbsrc.dir}"/>
    </copy>
    <junit>
      <classpath>
         <path refid="cp"/>
         <pathelement location="${build.classes.dir}"/>
      </classpath>
      <formatter type="plain" usefile="false"/>
      <test name="org.firebirdsql.jca.TestFBResultSet"/>
      <test name="org.firebirdsql.jca.TestFBDatabaseMetaData"/>
    </junit>
  </target>

  <target name="junit1" depends="jmx.jar">
    <delete file="${db.dir}/fbmctest.gdb"/>
    <copy todir="${db.dir}">
        <fileset dir="${dbsrc.dir}"/>
    </copy>
    <junit>
      <classpath>
         <path refid="cp"/>
         <pathelement location="${build.classes.dir}"/>
      </classpath>
      <formatter type="plain" usefile="false"/>
      <test name="org.firebirdsql.management.TestFBManager"/>
      <test name="org.firebirdsql.jgds.TestGds"/>
      <test name="org.firebirdsql.jca.TestFBManagedConnectionFactory"/>
      <test name="org.firebirdsql.jca.TestFBXAResource"/>
      <test name="org.firebirdsql.jca.TestFBConnection"/>
      <test name="org.firebirdsql.jca.TestFBStandAloneConnectionManager"/>
      <test name="org.firebirdsql.jca.TestFBResultSet"/>
      <test name="org.firebirdsql.jca.TestFBBlob"/>
      <test name="org.firebirdsql.jca.TestFBDatabaseMetaData"/>
    </junit>
  </target>

  <!-- =================================================================== -->
  <!-- Creates the jmx-jar archives                                            -->
  <!-- =================================================================== -->
  <target name="jmx.jar" depends="compile">
    <mkdir dir="${build.dir}/META-INF"/>
    <copy todir="${build.dir}/META-INF">
        <fileset dir="${src.resources.dir}"/>
    </copy>

    <jar jarfile="${dist.dir}/firebirdjmx.jar"
         basedir="${build.classes.dir}"
         includes="**/gds/**, **/jgds/**, **/management/**, **/META-INF/**"
         excludes="**/test/**"
    />
    <copy todir="/usr/java/jboss/dev/jboss/dist/lib/ext">
        <fileset dir="${dist.dir}" includes="firebirdjmx.jar"/>
    </copy>
  </target>



  <!-- =================================================================== -->
  <!-- Creates the rar archives                                            -->
  <!-- =================================================================== -->
  <target name="rar" depends="jar-ra">
    <mkdir dir="${build.jar-ra.dir}/META-INF"/>
    <copy todir="${build.jar-ra.dir}/META-INF">
        <fileset dir="${src.resources.dir}"/>
    </copy>

    <jar jarfile="${dist.dir}/firebirdsql.rar"
         basedir="${build.jar-ra.dir}"
         includes="firebirdsql.jar,META-INF/ra.xml"
    />
  </target>


  <!-- =================================================================== -->
  <!-- Creates the API documentation                                       -->
  <!-- =================================================================== -->
  <target name="javadocs" depends="prepare">
    <mkdir dir="${build.javadocs.dir}"/>
    <javadoc packagenames="${packages}"
             sourcepath="${src.dir}/main"
             destdir="${build.javadocs.dir}"
             classpath="${classpath}"
             author="true"
             version="true"
             windowtitle="${Name} API"
             doctitle="${Name}"
             extdirs="${src.lib.dir}"
             bottom="Copyright &#169; 2001 The JBoss Organization. All Rights Reserved."
    />
  </target>

  <!-- =================================================================== -->
  <!-- Creates the html documentation                                      -->
  <!-- =================================================================== -->
  <target name="docs" depends="prepare">
    
    <echo message="Sorry, you must copy the xml file into the manual/src/docs"/>
    <echo message="directory, add an external entity to jbossdocs.xml for howtorules,"/>
    <echo message="and compile it as part of the jboss documentation."/>
    <!--echo message="Building html documentation. Please wait ..."/-->
<!--    <style  basedir="${src.docs.dir}"             
             style="jboss.xsl"
             destdir="${build.docs.dir}"
             includes="jbossdocs.xml"
    />    
    <move todir="${build.docs.dir}">
      <fileset dir="${src.dir}/build" includes="*.html"/>
    </move>
    <delete file="${build.docs.dir}/jbossdocs.html"/>-->

    <!-- Stylesheets, images, and static HTML -->
 <!--   <copy todir="${build.docs.dir}">
       <fileset dir="${src.dir}/docs" excludes="*.xml,*.xsl,**/docbook/**,**/docbookx/**"/>
     </copy>
     -->
  </target>

  <!-- =================================================================== -->
  <!-- Creates the distribution                                            -->
  <!-- =================================================================== -->
  <target name="dist" depends="jar-ra,javadocs">
     <mkdir dir="${dist.dir}/docs"/>
     <mkdir dir="${dist.dir}/docs/api"/>
     <!--copy todir="${dist.dir}/docs">
        <fileset dir="${docs.dir}"/>
     </copy-->
     <copy todir="${dist.dir}/docs/api">
        <fileset dir="${build.javadocs.dir}"/>
     </copy>

     <mkdir dir="${dist.dir}/src"/>
     <copy todir="${dist.dir}/src">
        <fileset dir="${src.dir}">
           <exclude name="**/*.jar"/>
        </fileset>
     </copy>
  </target>

  <!-- =================================================================== -->
  <!-- Packages the source files with ZIP                                  -->
  <!-- =================================================================== -->
  <target name="src-zip">
    <zip zipfile="${Name}-src-${version}.zip" basedir="../.." includes="clients/java/**" excludes="clients/java/**.zip"/>
  </target>

  <!-- =================================================================== -->
  <!-- Packages the distribution with ZIP                                  -->
  <!-- =================================================================== -->
  <target name="dist-zip" depends="dist">
    <zip zipfile="${Name}-${version}.zip" basedir="${dist.dir}" includes="src/**"/>
  </target>

  <!-- =================================================================== -->
  <!-- Packages the distribution with TAR-GZIP                             -->
  <!-- =================================================================== -->
  <target name="dist-tgz" depends="dist">
    <tar tarfile="${Name}-${version}.tar" basedir="${dist.dir}" includes="src/**"/>
    <gzip zipfile="${Name}-${version}.tar.gz" src="${Name}-${version}.tar"/>
  </target>

  <!-- =================================================================== -->
  <!-- Cleans up generated stuff                                           -->
  <!-- =================================================================== -->
  <target name="clean">
    <delete dir="${build.dir}"/>
    <delete dir="${dist.dir}"/>
  </target>

  <!-- =================================================================== -->
  <!-- Total cleanup                                                       -->
  <!-- =================================================================== -->
  <target name="total-clean" depends="clean">
    <delete file="${Name}-${version}.zip"/>
    <delete file="${Name}-${version}.tar"/>
    <delete file="${Name}-${version}.tar.gz"/>
  </target>
</project>






