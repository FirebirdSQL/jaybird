<?xml version="1.0"?>
<!--
    JDBC-JCA Driver for Firebird build file for native code

    This build file will build the code from:
    src/native/jaygds

    into a shared library named 'jaybird' in:
    output/native

   This file requires that either the environment variable JDK_HOME or the property java_home is set.

    Currently Supported Platforms:

    Platform        Compiler/Linker
    
    Windows         MSVC 6 / MSVC 10
    Linux           GCC

    Untested (but might work)
    AIX             xlC (Visual Age compiler)
    HP-UX           aCC (HP aCC+ compiler)
    MVS z/OS        os390 (c++) 
    Solaris         GCC, CC (Sun ONE compiler)
    

    MVS Requirements:
    =================
    Jaybird was successfully built on MVS using z/OS. Several steps were
    necessary to work around the ASCII/EBCDIC character issues.
    These are the environment variables I used:
    
    export IBM_JAVA_OPTIONS="-Xnoargsconversion -Dfile.encoding=ISO8859-1"
    export _CXX_CXXSUFFIX=cpp
    export _BPXK_AUTOCVT="ON"
    export _CEE_RUNOPTS="XPLINK(ON),POSIX(ON),FILETAG(NOAUTOCVT)"
    export _BPX_SHAREAS=NO
    export USE_os390=true
   
    Without _BPX_SHAREAS set to NO, the junit tests all fail with an
    "unavailable database" error message.

    In this configuration, the JVM writes all files using ISO8859-1 encoding.
    My environment has a samba drive mounted at /net/bin/u/userid and
    /net/txt/u/userid. By switching between /net/bin and /net/txt, the
    user selects whether the network performs automatic file encoding
    conversions. 

    client-java was installed at /net/bin/u/userid/client-java. JNI
    was built using the command
    
    cd /net/bin/u/userid/client-java
    ant -Dsource.native=/net/txt/u/userid/client-java/src/native/jaygds/source compile-native 
    
    Our current directory is on /net/bin mount point for writing
    binary output files. But, ant needs to read the .cpp source files
    as text files, which is why the -Dsource.native option is specified.
-->
<project name="FirebirdSQL_native" default="compile" basedir=".">

    <taskdef resource="cpptasks.tasks" />
    <typedef resource="cpptasks.types" />

    <target name="init">
        <!-- Setup the build timestamp & build identifer properties -->
        <tstamp>
            <format property="build.number" pattern="yyyyMMddHHmm" />
            <format property="YEAR" pattern="yyyy" />
        </tstamp>

        <property environment="env" />

        <!--  -->
        <property name="module.root" value="${basedir}" />
        <property name="module.source" value="${module.root}/src" />
        <property name="module.output" value="${module.root}/output" />

        <!--  -->
        <property name="build.native" value="${module.output}/native" />
        <property name="build.native.output" value="${build.native}" />


        <!-- 
            Name of the output library. On Windows this will be 
            resolved to jaybird.dll, on Linux it will be libjaybird.so
            
            For amd64 it is set to jaybird22_x64 (note: detection depends on the bitness of the JVM used to run ANT!)
        -->
        <condition property="build.native.name" value="jaybird22" else="jaybird22_x64">
            <not>
                <os arch="amd64" />
            </not>
        </condition>

        <!--  -->
        <property name="source.native" value="${module.source}/native/jaygds/source" />

        <mkdir dir="${build.native.output}" />


        <!--
        Set 'java_home' property to value of environment variable JAVA_HOME if java_home property is not already set.
        -->
        <condition property="java_home" value="${env.JAVA_HOME}">
            <and>
                <isset property="env.JAVA_HOME" />
                <not>
                    <isset property="java_home" />
                </not>
            </and>
        </condition>
    </target>

    <!--
    There are three main pieces of infomation we need about the platform. This target extracts that infomation.

    First we need to know if this platform is windows in which case we use msvc otherwise all other platforms
    will use gcc. To do this we set the property:

    buildon-windows

    if the platform is windows otherwise we leave the property unset.

    Next we need to know the name of the directory of the platform specific header files in the JDK. This name is placed
    into:

    jdks_platform_headers

    Finally we need to know the name of the directory containg jaybirds platform specfic headers. This name is placed
    into:

    jaybirds_platform_headers
    -->
    <target name="set_platform_properties" depends="init">
        <echo message="os.name=${os.name}" />

        <!-- set 'buildon-windows' - this should be all we ever need here  -->
        <condition property="buildon-windows">
            <os family="windows" />
        </condition>

        <condition property="buildon-mvs">
            <os name="z/OS" />
        </condition>

        <condition property="buildon-unix">
            <not>
                <isset property="buildon-windows" />
            </not>
        </condition>

        <condition property="buildon-solaris">
            <or>
                <equals arg1="${os.name}" arg2="Solaris" casesensitive="false" />
                <equals arg1="${os.name}" arg2="SunOs" casesensitive="false" />
            </or>
        </condition>

        <condition property="buildon-hp-ux">
            <or>
                <equals arg1="${os.name}" arg2="HP-UX" casesensitive="false" />
            </or>
        </condition>

        <!-- set 'jaybirds_platform_headers' -->
        <!-- there does not seem to be a need to set this on AIX -->
        <condition property="jaybirds_platform_headers" value="mvs">
            <isset property="buildon-mvs" />
        </condition>

        <condition property="jaybirds_platform_headers" value="win32">
            <isset property="buildon-windows" />
        </condition>

        <condition property="jaybirds_platform_headers" value="solaris">
            <isset property="buildon-solaris" />
        </condition>

        <condition property="jaybirds_platform_headers" value="generic_unix">
            <isset property="buildon-hp-ux" />
        </condition>

        <condition property="jaybirds_platform_headers" value="generic_unix">
            <not>
                <isset property="buildon-windows" />
            </not>
        </condition>

        <echo message="jaybirds_platform_headers=${jaybirds_platform_headers}" />

        <!-- set 'jdks_platform_headers' -->

        <condition property="jdks_platform_headers" value="win32">
            <isset property="buildon-windows" />
        </condition>

        <condition property="jdks_platform_headers" value="solaris">
            <os name="SunOS" />
        </condition>

        <condition property="jdks_platform_headers" value="linux">
            <os name="linux" />
        </condition>

        <condition property="jdks_platform_headers" value="hp-ux">
            <os name="HP-UX" />
        </condition>

        <!-- check if we should build using MinGW -->
        <condition property="use.mingw" value="true">
            <and>
                <isset property="env.USE_MINGW" />
                <isset property="buildon-windows" />
            </and>
        </condition>

        <!-- check if we should build using CC -->
        <condition property="use.CC" value="true">
            <or>
                <isset property="env.USE_CC" />
                <isset property="env.USE_CC_64" />
            </or>
        </condition>

        <!-- set flag for xlC compiles -->
        <condition property="use.xlC" value="true">
            <or>
                <isset property="env.USE_xlC" />
                <isset property="env.USE_xlC_64" />
            </or>
        </condition>

        <!-- set flag for aCC compiles -->
        <condition property="use.aCC" value="true">
            <or>
                <isset property="env.USE_aCC" />
                <isset property="env.USE_aCC_64" />
            </or>
        </condition>

        <!-- set flag for os390 compiles -->
        <condition property="use.os390" value="true">
            <or>
                <isset property="env.USE_os390" />
            </or>
        </condition>

        <!-- final check for good ol' gcc -->
        <condition property="use.gcc" value="true">
            <and>
                <os family="unix" />
                <not>
                    <isset property="use.CC" />
                </not>
                <not>
                    <isset property="use.xlC" />
                </not>
                <not>
                    <isset property="use.aCC" />
                </not>
                <not>
                    <isset property="use.os390" />
                </not>
            </and>
        </condition>
    </target>

    <target name="prepare_compile" depends="prepare_CC,prepare_aCC,prepare_mingw,prepare_msvc,prepare_gcc,prepare_xlC,prepare_os390" />

    <!-- 
        MinGW compiler and linker properties.
    -->
    <target name="prepare_mingw" if="use.mingw">

        <property name="output.file" value="${build.native.output}/${build.native.name}.dll" />

        <compiler id="jaybird.compiler" name="g++">
            <defineset>
                <define name="JAVA_GDS_EXPORTS" />
                <define name="WIN32" />
                <define name="_JNI_IMPLEMENTATION_" />
            </defineset>
        </compiler>

        <linker id="jaybird.linker" name="gcc" if="use.mingw">
            <linkerarg value="--add-stdcall-alias" />
            <linkerarg value="-o${output.file}" />
            <syslibset libs="stdc++" />
        </linker>

    </target>

    <!--
        Microsoft Visual C++ compiler and linker definitions.
    -->
    <target name="prepare_msvc" if="buildon-windows" unless="use.mingw">

        <compiler id="jaybird.compiler" name="msvc">
            <!--  target Pentium Pro   -->
            <compilerarg value="/G6" />
            <!--  display many warnings   -->
            <compilerarg value="/W3" />
            <!--  maximize speed     -->
            <compilerarg value="/O2" />
            <!--  auto-inlining    -->
            <compilerarg value="/Ob2" />
            <!--  mulithread dll crt    -->
            <compilerarg value="/MD" />

            <defineset>
                <define name="WIN32" />
                <define name="NDEBUG" />
                <define name="_WINDOWS" />
                <define name="_MBCS" />
                <define name="_USRDLL" />
                <define name="JAVA_GDS_EXPORTS" />
            </defineset>

        </compiler>

        <linker id="jaybird.linker" name="msvc" if="buildon-windows" unless="use.mingw">
            <syslibset libs="kernel32,user32" />
        </linker>

    </target>

    <!--
        Generic GCC compiler and linker definitions.
    -->
    <target name="prepare_gcc" if="use.gcc">
        <echo message="use.gcc=${use.gcc}" />

        <compiler id="jaybird.compiler" name="gcc" if="buildon-unix">

            <defineset>
                <define name="JAVA_GDS_EXPORTS" />
                <define name="ARCH_IS_BIG_ENDIAN=1" if="buildon-solaris" />
            </defineset>
        </compiler>


        <linker id="jaybird.linker" name="gcc" if="buildon-unix">
            <!--
                Using linkerarg does not seem to work (at least not on Ubuntu 12.04 and 11.10),
                while syslibset does work.
                
                Outdated comment (might be useful for debugging on other platforms):
                These are set using linkerarg rather then syslibset because on some platforms I found that the code 
                would not build using syslibset - The Ant task seemed too be creating an incorrect command line to
                run the linker.
            -->
            <linkerarg value="-ldl" />
            <linkerarg value="-lc" />
            <linkerarg value="-lstdc++" />
            <syslibset libs="stdc++,dl" />
        </linker>

    </target>

    <!-- 
        CC (Sun ONE) compiler and linker properties.
    -->
    <target name="prepare_CC" if="use.CC">

        <compiler id="jaybird.compiler" name="CC">
            <compilerarg value="-xarch=v9" if="env.USE_CC_64" />
            <defineset>
                <define name="ARCH_IS_BIG_ENDIAN=1" />
            </defineset>
        </compiler>

        <linker id="jaybird.linker" name="CC">
            <linkerarg value="-xarch=v9" if="env.USE_CC_64" />
        </linker>

    </target>

    <!-- 
        xlC (AIX Visaul Age) compiler and linker properties.
    -->
    <target name="prepare_xlC" if="use.xlC">

        <echo message="use.xlC=${use.xlC}" />
        <echo message="USE_xlC_64=${env.USE_xlC_64}" />
        <compiler id="jaybird.compiler" name="xlC">
            <compilerarg value="-q64" if="env.USE_xlC_64" />
            <compilerarg value="-ma" />
            <defineset>
                <define name="ARCH_IS_BIG_ENDIAN=1" />
            </defineset>
        </compiler>

        <linker id="jaybird.linker" name="xlC">
            <linkerarg value="-X64" if="env.USE_xlC_64" />
            <linkerarg value="-p 0" />
        </linker>

    </target>

    <!-- 
        aCC (HP-UX) compiler and linker properties.
    -->
    <target name="prepare_aCC" if="use.aCC">

        <echo message="use.aCC=${use.aCC}" />
        <echo message="USE_aCC_64=${env.USE_aCC_64}" />
        <compiler id="jaybird.compiler" name="aCC">
            <compilerarg value="-mt" />
            <compilerarg value="+DD64" if="env.USE_aCC_64" />
            <compilerarg value="-AA" if="env.USE_aCC_64" />
            <defineset>
                <define name="ARCH_IS_BIG_ENDIAN=1" />
            </defineset>
        </compiler>

        <linker id="jaybird.linker" name="aCC">
            <linkerarg value="+DD64" if="env.USE_aCC_64" />
<!--
                <linkerarg value="-lstd_v2"/>
                <linkerarg value="-lCsup"/>
                <linkerarg value="-lpthread"/>
                <linkerarg value="-lm"/>
                <linkerarg value="-lunwind"/>
                <linkerarg value="-lCsup"/>
                <linkerarg value="-lc"/>
                <linkerarg value="-ldl"/>
-->
        </linker>

    </target>
    <!-- 
        os390 (IBM MVS compiler)
    -->
    <target name="prepare_os390" if="use.os390">

        <echo message="use.os390=${use.os390}" />
        <compiler id="jaybird.compiler" name="os390">
            <compilerarg value="-W" />
            <compilerarg value="c,xplink,ascii,chars(signed),dll,expo,langlvl(extended),float(ieee)" />
            <defineset>
                <define name="_ALL_SOURCE" />
                <define name="ARCH_IS_BIG_ENDIAN=1" />
                <define name="JAVA_GDS_EXPORTS" />
            </defineset>
        </compiler>

        <linker id="jaybird.linker" name="os390">
            <linkerarg value="-W" />
            <linkerarg value="l,xplink,compat=current,TERM" />
        </linker>

    </target>

    <!--
        Compile and link
    -->
    <target name="compile" depends="init,set_platform_properties,prepare_compile">

        <cc debug="false" optimize="full" link="shared" objdir="${build.native.output}" outfile="${build.native.output}/${build.native.name}" multithreaded="true" exceptions="true">

            <!-- jaybird include search paths -->
            <includepath location="${source.native}" />
            <includepath location="${source.native}/${jaybirds_platform_headers}" />
            <includepath location="${source.native}/external" />

            <!-- jdk include search paths  -->
            <includepath location="${java_home}/include" />
            <includepath location="${java_home}/include/${jdks_platform_headers}" />

            <!-- jaybird files to be compiles -->
            <fileset dir="${source.native}">
                <include name="*.cpp" />
                <include name="${jaybirds_platform_headers}/platform.cpp" />
            </fileset>
            <compiler refid="jaybird.compiler" />
            <linker refid="jaybird.linker" />
        </cc>

        <!-- next line added for 64-bit HP-UX -->
        <move file="${native.library.location}/lib${native.library.name}.sl" tofile="${native.library.location}/lib${native.library.name}.so" failonerror="false" overwrite="true" />

        <!-- delete>
            <fileset dir="${build.native.output}" includes="*.obj"/>
            <fileset dir="${build.native.output}" includes="*.o"/>
            <fileset dir="${build.native.output}" includes="*.exp"/>
            <fileset dir="${build.native.output}" includes="*.lib"/>
            <fileset dir="${build.native.output}" includes="*.xml"/>
        </delete -->
    </target>
</project>
