  <!-- =================================================================== -->
  <!-- runs the junit tests                                                -->
  <!-- =================================================================== -->

  <target name="all-tests-pure-java" depends="jars">

   <!-- Override JUnit defaults -->

    <!--create local db dir, if you are running on remote machine
      you must provide it yourself -->
    <mkdir dir="${module.output}/db"/>
    <chmod dir="${module.output}/db" perm="777"/>
    <mkdir dir="${build.reports.pure_java}"/>
    <mkdir dir="${build.testlog}"/>
    <junit dir="${module.output}"
	   printsummary="${junit.printsummary}"
	   haltonerror="${junit.haltonerror}"
	   haltonfailure="${junit.haltonfailure}"
	   fork="${junit.fork}"
       forkmode="${junit.forkmode}"
	   timeout="${junit.timeout}"
	   jvm="${junit.jvm}">

      <jvmarg value="${junit.jvm.options}"/>
      <sysproperty key="jbosstest.deploy.dir" file="${build.lib}"/>
      <sysproperty key="log4j.properties" file="${build.resources}/log4j.properties"/>
      <sysproperty key="test.db.dir" value="${test.db.dir}"/>
      <sysproperty key="test.db.host" value="${test.db.host}"/>
      <sysproperty key="test.db.port" value="${test.db.port}"/>
      <sysproperty key="test.db.lc_ctype" value="${test.db.lc_ctype}"/>
      <sysproperty key="test.gds_type" value="PURE_JAVA"/>

      <classpath>
        <pathelement location="${build.lib}/${archive.name.simple}"/>
        <pathelement location="${build.lib}/${archive.name.test}"/>
        <pathelement location="${build.lib}/connector-api-1.5.jar"/>

        <fileset dir="lib">
          <include name="**/*.jar"/>
		  <exclude name="**/ant.jar **/ant-*.jar"/>
        </fileset>

        <path refid="javac.test.classpath"/>
      </classpath>

      <formatter type="${junit.formatter.type}"
		 usefile="${junit.formatter.usefile}"/>

      <batchtest todir="${build.reports.pure_java}"
		 haltonerror="${junit.batchtest.haltonerror}"
		 haltonfailure="${junit.batchtest.haltonfailure}">

        <fileset dir="${build.test}">
          <include name="**/Test*.class"/>
          <exclude name="**/jni/Test*.class"/>
          <exclude name="**/TestAll.class"/>
          <exclude name="**/TestXABase*.class"/>
          <exclude name="**/TestConst.class"/>
          <exclude name="**/*$$*.class"/>

        </fileset>
      </batchtest>
    </junit>
  </target>

  <target name="all-tests-native" depends="jars,compile-native,copy_native_to_test_path,all-tests-native-only"/>
  <target name="all-tests-native-only" depends="init">

   <!-- Override JUnit defaults -->

    <!--create local db dir, if you are running on remote machine
      you must provide it yourself -->
    <mkdir dir="${module.output}/db"/>
    <mkdir dir="${build.reports.native}"/>
    <mkdir dir="${build.testlog}"/>
    <chmod dir="${module.output}/db" perm="777"/>
    <junit dir="${module.output}"
	   printsummary="${junit.printsummary}"
	   haltonerror="${junit.haltonerror}"
	   haltonfailure="${junit.haltonfailure}"
	   fork="${junit.fork}"
       forkmode="${junit.forkmode}"
	   timeout="${junit.timeout}"
	   jvm="${junit.jvm}">

      <jvmarg value="${junit.jvm.options}"/>
      <sysproperty key="java.library.path" value="${native.library.location}"/>
      <sysproperty key="jbosstest.deploy.dir" file="${build.lib}"/>
      <sysproperty key="log4j.properties" file="${build.resources}/log4j.properties"/>
      <sysproperty key="test.db.dir" value="${test.db.dir}"/>
      <sysproperty key="test.db.host" value="${test.db.host}"/>
      <sysproperty key="test.db.port" value="${test.db.port}"/>
      <sysproperty key="test.db.lc_ctype" value="${test.db.lc_ctype}"/>
      <sysproperty key="test.gds_type" value="NATIVE"/>

      <classpath>
        <!-- pathelement location="${build.classes}"/ -->
        <!-- pathelement location="${build.test}"/ -->
        <!-- pathelement location="${build.resources}"/ -->

        <pathelement location="${build.lib}/${archive.name.simple}"/>
        <pathelement location="${build.lib}/${archive.name.test}"/>
        <pathelement location="${build.lib}/connector-api-1.5.jar"/>

        <fileset dir="lib">
          <include name="**/*.jar"/>
		  <exclude name="**/ant.jar **/ant-*.jar"/>
        </fileset>

        <path refid="javac.test.classpath"/>
      </classpath>

      <formatter type="${junit.formatter.type}"
		 usefile="${junit.formatter.usefile}"/>

      <batchtest todir="${build.reports.native}"
		 haltonerror="${junit.batchtest.haltonerror}"
		 haltonfailure="${junit.batchtest.haltonfailure}">

        <fileset dir="${build.test}">
          <include name="**/Test*.class"/>
          <exclude name="**/wire/Test*.class"/>
          <exclude name="**/TestAll.class"/>
          <exclude name="**/TestXABase*.class"/>
          <exclude name="**/TestConst.class"/>
          <exclude name="**/*$$*.class"/>
          <exclude name="**/jni/TestSpecialEmbeddedServerUrls.class"/>
          <exclude name="**/jni/TestServicesAPI.class"/>
	      <exclude name="**/jni/TestJaybirdBlobBackupProblem.class"/>
          <exclude name="**/TestReconnectTransaction.class"/>
        </fileset>
      </batchtest>
    </junit>
  </target>

  <target name="all-tests-embedded" depends="jars,compile-native,copy_native_to_test_path,all-tests-embedded-only"/>
  <target name="all-tests-embedded-only" depends="init">

   <!-- Override JUnit defaults -->
    <property name="test.gds_type" value="EMBEDDED"/>

    <!--create local db dir, if you are running on remote machine
      you must provide it yourself -->
    <mkdir dir="${module.output}/db"/>
    <mkdir dir="${build.reports.embedded}"/>
    <mkdir dir="${build.testlog}"/>
    <junit dir="${module.output}"
	   printsummary="${junit.printsummary}"
	   haltonerror="${junit.haltonerror}"
	   haltonfailure="${junit.haltonfailure}"
	   fork="${junit.fork}"
       forkmode="${junit.forkmode}"
	   timeout="${junit.timeout}"
	   jvm="${junit.jvm}">

      <jvmarg value="${junit.jvm.options}"/>
      <sysproperty key="java.library.path" value="${module.output}/native"/>
      <sysproperty key="jbosstest.deploy.dir" file="${build.lib}"/>
      <sysproperty key="log4j.properties" file="${build.resources}/log4j.properties"/>
      <sysproperty key="test.db.dir" value="${test.db.dir}"/>
      <sysproperty key="test.db.host" value="${test.db.host}"/>
      <sysproperty key="test.db.port" value="${test.db.port}"/>
      <sysproperty key="test.db.lc_ctype" value="${test.db.lc_ctype}"/>
      <sysproperty key="test.gds_type" value="EMBEDDED"/>

      <classpath>
        <!-- pathelement location="${build.classes}"/ -->
        <!-- pathelement location="${build.test}"/ -->
        <!-- pathelement location="${build.resources}"/ -->

        <pathelement location="${build.lib}/${archive.name.simple}"/>
        <pathelement location="${build.lib}/${archive.name.test}"/>
        <pathelement location="${build.lib}/connector-api-1.5.jar"/>

        <fileset dir="lib">
          <include name="**/*.jar"/>
		  <exclude name="**/ant.jar **/ant-*.jar"/>
        </fileset>

        <path refid="javac.test.classpath"/>
      </classpath>

      <formatter type="${junit.formatter.type}"
		 usefile="${junit.formatter.usefile}"/>

      <batchtest todir="${build.reports.embedded}"
		 haltonerror="${junit.batchtest.haltonerror}"
		 haltonfailure="${junit.batchtest.haltonfailure}">

        <fileset dir="${build.test}">
          <include name="**/Test*.class"/>
          <exclude name="**/wire/Test*.class"/>
          <exclude name="**/TestAll.class"/>
          <exclude name="**/TestXABase*.class"/>
          <exclude name="**/TestConst.class"/>
          <exclude name="**/*$$*.class"/>
		  <exclude name="**/TestReconnectTransaction.class"/>
        </fileset>
      </batchtest>
    </junit>
  </target>

  <!--
     | Run a single testcase by specifing the part of the test name after Test before the .class
     | of the unit test using the test property, -Dtest=Gds one-test
     | Here you specify the testcase class, not the directory
   -->

  <target name="one-test-pure-java" depends="jars"
	  description="Execute a single test.">
    <mkdir dir="${test.db.dir}"/>
    <chmod dir="${test.db.dir}" perm="777"/>
    <mkdir dir="${build.reports.pure_java}"/>
    <mkdir dir="${build.testlog}"/>
    <junit dir="${module.output}"
	   printsummary="${junit.printsummary}"
	   haltonerror="${junit.haltonerror}"
	   haltonfailure="${junit.haltonfailure}"
	   fork="${junit.fork}"
       forkmode="${junit.forkmode}"
	   timeout="${junit.timeout}"
	   jvm="${junit.jvm}">

      <jvmarg value="${junit.jvm.options}"/>
      <sysproperty key="jbosstest.deploy.dir" file="${build.lib}"/>
      <sysproperty key="log4j.properties" file="${build.resources}/log4j.properties"/>
      <sysproperty key="test.db.dir" value="${test.db.dir}"/>
      <sysproperty key="test.db.host" value="${test.db.host}"/>
      <sysproperty key="test.db.port" value="${test.db.port}"/>
      <sysproperty key="test.db.lc_ctype" value="${test.db.lc_ctype}"/>

      <classpath>
        <pathelement location="${build.classes}"/>
        <pathelement location="${build.test}"/>
        <pathelement location="${build.resources}"/>
        <fileset dir="lib">
          <include name="**/*.jar"/>
		  <exclude name="**/ant.jar **/ant-*.jar"/>
        </fileset>
        <path refid="javac.test.classpath"/>
      </classpath>

      <formatter type="${junit.formatter.type}"
		 usefile="${junit.formatter.usefile}"/>

      <batchtest todir="${build.reports.pure_java}"
		 haltonerror="${junit.batchtest.haltonerror}"
		 haltonfailure="${junit.batchtest.haltonfailure}">

        <fileset dir="${build.test}">
            <include name="org/firebirdsql/*/Test${test}*.class"/>
            <exclude name="org/firebirdsql/*/*$$*.class"/>
        </fileset>
      </batchtest>
    </junit>
  </target>

  <target name="one-test-native" 
            depends="jars,compile-native,copy_native_to_test_path"
	    description="Execute a single test.">
    <mkdir dir="${test.db.dir}"/>
    <chmod dir="${test.db.dir}" perm="777"/>
    <mkdir dir="${build.reports.native}"/>
    <mkdir dir="${build.testlog}"/>
    <junit dir="${module.output}"
	   printsummary="${junit.printsummary}"
	   haltonerror="${junit.haltonerror}"
	   haltonfailure="${junit.haltonfailure}"
	   fork="${junit.fork}"
       forkmode="${junit.forkmode}"
	   timeout="${junit.timeout}"
	   jvm="${junit.jvm}">

      <jvmarg value="${junit.jvm.options}"/>
      <sysproperty key="java.library.path" value="${module.output}/native"/>
      <sysproperty key="jbosstest.deploy.dir" file="${build.lib}"/>
      <sysproperty key="log4j.properties" file="${build.resources}/log4j.properties"/>
      <sysproperty key="test.db.dir" value="${test.db.dir}"/>
      <sysproperty key="test.db.host" value="${test.db.host}"/>
      <sysproperty key="test.db.port" value="${test.db.port}"/>
      <sysproperty key="test.db.lc_ctype" value="${test.db.lc_ctype}"/>
      <sysproperty key="test.gds_type" value="NATIVE"/>

      <classpath>
        <pathelement location="${build.classes}"/>
        <pathelement location="${build.test}"/>
        <pathelement location="${build.resources}"/>

        <fileset dir="lib">
          <include name="**/*.jar"/>
		  <exclude name="**/ant.jar **/ant-*.jar"/>
        </fileset>

        <path refid="javac.test.classpath"/>
      </classpath>

      <formatter type="${junit.formatter.type}"
		 usefile="${junit.formatter.usefile}"/>

      <batchtest todir="${build.reports.native}"
		 haltonerror="${junit.batchtest.haltonerror}"
		 haltonfailure="${junit.batchtest.haltonfailure}">

        <fileset dir="${build.test}">
          <include name="org/firebirdsql/*/Test${test}*.class"/>
        </fileset>
      </batchtest>
    </junit>
  </target>

  <target name="one-test-embedded" depends="jars"
	  description="Execute a single test.">
    <mkdir dir="${test.db.dir}"/>
    <mkdir dir="${build.reports.embedded}"/>
    <mkdir dir="${build.testlog}"/>
    <junit dir="${module.output}"
	   printsummary="${junit.printsummary}"
	   haltonerror="${junit.haltonerror}"
	   haltonfailure="${junit.haltonfailure}"
	   fork="${junit.fork}"
       forkmode="${junit.forkmode}"
	   timeout="${junit.timeout}"
	   jvm="${junit.jvm}">

      <jvmarg value="${junit.jvm.options}"/>
      <sysproperty key="jbosstest.deploy.dir" file="${build.lib}"/>
      <sysproperty key="log4j.properties" file="${build.resources}/log4j.properties"/>
      <sysproperty key="test.db.dir" value="${test.db.dir}"/>
      <sysproperty key="test.db.host" value="${test.db.host}"/>
      <sysproperty key="test.db.port" value="${test.db.port}"/>
      <sysproperty key="test.db.lc_ctype" value="${test.db.lc_ctype}"/>

      <classpath>
        <pathelement location="${build.classes}"/>
        <pathelement location="${build.test}"/>
        <pathelement location="${build.resources}"/>

        <fileset dir="lib">
          <include name="**/*.jar"/>
		  <exclude name="**/ant.jar **/ant-*.jar"/>
        </fileset>

        <path refid="javac.test.classpath"/>
      </classpath>

      <formatter type="${junit.formatter.type}"
		 usefile="${junit.formatter.usefile}"/>

      <batchtest todir="${build.reports.embedded}"
		 haltonerror="${junit.batchtest.haltonerror}"
		 haltonfailure="${junit.batchtest.haltonfailure}">

        <fileset dir="${build.test}">
          <include name="org/firebirdsql/*/Test${test}*.class"/>
        </fileset>
      </batchtest>
    </junit>
  </target>


  <target name="tests-report-html-pure-java" depends="all-tests-pure-java">
    <mkdir dir="${build.reports.pure_java}/html"/>

    <junitreport todir="${build.reports.pure_java}">
      <fileset dir="${build.reports.pure_java}">
        <include name="TEST-*.xml"/>
      </fileset>
      <report format="frames"
              todir="${build.reports.pure_java}/html"
              styledir="${build.stylesheets}"
      />
    </junitreport>
  </target>

  <target name="tests-report-html-native"  depends="all-tests-native,tests-report-html-native-only"/>
  <target name="tests-report-html-native-only" depends="init">
    <mkdir dir="${build.reports.native}/html"/>

    <junitreport todir="${build.reports.native}">
      <fileset dir="${build.reports.native}">
        <include name="TEST-*.xml"/>
      </fileset>
      <report format="frames"
              todir="${build.reports.native}/html"
              styledir="${build.stylesheets}"
      />
    </junitreport>
  </target>

  <target name="tests-report-html-embedded"  depends="all-tests-embedded,tests-report-html-embedded-only"/>
  <target name="tests-report-html-embedded-only" depends="init">
    <mkdir dir="${build.reports.embedded}/html"/>

    <junitreport todir="${build.reports.embedded}">
      <fileset dir="${build.reports.embedded}">
        <include name="TEST-*.xml"/>
      </fileset>
      <report format="frames"
              todir="${build.reports.embedded}/html"
              styledir="${build.stylesheets}"
      />
    </junitreport>
  </target>

  <target name="tests-report-html-all" depends="tests-report-html-pure-java,tests-report-html-native,tests-report-html-embedded">
  </target>
