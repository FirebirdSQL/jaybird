<?xml version="1.0"?>

<!-- ======================================================================= -->
<!-- JDBC-JCA Driver for Firebird build file                                -->
<!-- ======================================================================= -->


<project name="FirebirdSQL" default="tests-report-html-pure-java" basedir=".">

  <target name="init">
    <!-- Setup the build timestamp & build identifer properties -->
    <tstamp>
      <format property="build.number" pattern="yyyyMMddHHmm"/>
      <format property="YEAR" pattern="yyyy"/>
    </tstamp>
    <property name="build.id" value="${build.number}"/>


    <property name="Name" value="FirebirdSQL"/>
    <property name="name" value="firebirdsql"/>

    <property name="version.major" value="1"/>
    <property name="version.minor" value="1"/>
    <property name="version.revision" value="0"/>
    <property name="version.tag" value="Beta"/>
    <property name="version.name" value=""/>

    <property name="version.full" value="${version.major}.${version.minor}.${version.revision}${version.tag}"/>

    <!-- This must be set to the CVS tag for any release -->
    <property name="version.cvstag" value="HEAD"/>

    <!-- Manifest version info -->
    <property name="specification.title" value="FirebirdSQL JayBird"/>
    <property name="specification.version" value="${version.major}.${version.minor}"/>
    <property name="specification.vendor" value="FirebirdSQL (http://www.firebirdsql.org)"/>

    <property name="implementation.title" value="JayBird"/>
    <property name="implementation.url" value="http://www.firebirdsql.org"/>
    <property name="implementation.version"
            value="${version.full} (build: CVSTag=${version.cvstag} date=${build.id})"/>
    <property name="implementation.vendor" value="FirebirdSQL"/>
    <property name="implementation.vendor.id" value="${implementation.url}"/>

    <!--where everything goes -->
    <property name="lib.dir" value="${basedir}/lib"/>

<!--you will presumably need to change this if you want to use it.-->
    <property name="jboss.base.dir" value="/usr/java/jboss/rc1/jboss-all/build/output/jboss-3.0.1RC1"/>
    <property name="jboss.deploy.dir" value="${jboss.base.dir}/server/all/deploy"/>

    <!-- Setup the module environment. -->
    <property name="module.root" value="${basedir}"/>

    <property file="${module.root}/local.properties"/>
    <property name="module.source" value="${module.root}/src"/>
    <property name="module.output" value="${module.root}/output"/>
    <property name="module.tools" value="${module.root}/lib"/>
    <property name="module.thirdparty" value="${module.source}/lib"/>
    <property name="module.etc" value="${module.source}/etc"/>
    <property name="module.examples" value="${module.root}/examples"/>

    <!-- Where source files live -->
    <property name="source.java" value="${module.source}/main"/>
    <property name="source.etc" value="${module.source}/etc"/>
    <property name="source.examples" value="${module.examples}"/>
    <property name="source.examples" value="${module.root}/examples"/>
    <property name="source.resources" value="${module.source}/resources"/>
    <property name="source.stylesheets" value="${module.source}/stylesheets"/>
    <property name="source.test" value="${module.source}/test"/>
    <property name="source.pool" value="${module.source}/pool"/>

    <property name="thirdparty" value="${module.root}/thirdparty"/>
    <property name="jboss.source.root"
	    location="${thirdparty}/jboss/"/>


    <!-- Where build generated files will go -->
    <property name="build.j2ee" value="${module.output}/j2ee"/>
    <property name="build.concurrent" value="${module.output}/concurrent"/>
    <property name="build.classes" value="${module.output}/classes"/>
    <property name="build.pool" value="${module.output}/pool"/>
    <property name="build.test" value="${module.output}/test"/>
    <property name="build.lib" value="${module.output}/lib"/>
    <property name="build.api" value="${module.output}/api"/>
    <property name="build.examples" value="${module.output}/examples"/>
    <property name="build.etc" value="${module.output}/etc"/>
    <property name="build.bin" value="${module.output}/bin"/>
    <property name="build.docs" value="${module.output}/docs"/>
    <property name="build.resources" value="${module.output}/resources"/>
    <property name="build.stylesheets" value="${module.output}/stylesheets"/>
    <property name="build.reports.pure_java" value="${module.output}/reports/pure_java"/>
    <property name="build.reports.native" value="${module.output}/reports/native"/>
    <property name="build.reports.embedded" value="${module.output}/reports/embedded"/>
    <property name="build.testlog" value="${module.output}/log"/>
    <property name="build.dist" value="${module.output}/dist"/>

    <property name="junit.timeout" value="600000"/> <!-- 10 minutes -->
    <property name="junit.batchtest.todir" value="${build.reports}"/>
    <property name="junit.jvm" value="java"/>
    <property name="junit.jvm.options" value="-Ddummy"/>

    <property name="junit.formatter.type" value="xml"/>
    <property name="junit.formatter.usefile" value="true"/>
    <property name="junit.printsummary" value="true"/>
    <property name="junit.haltonerror"  value="true"/>
    <property name="junit.haltonfailure"  value="true"/>
    <property name="junit.fork" value="true"/>
    <property name="junit.timeout" value="60000"/>
    <!--property name="junit.jvm" value="true"/-->

<!-- these may be overridden on the command line to test against a server
  on another host.  For example,
./build.sh -Dtest.db.host=192.168.0.3 -Dtest.db.dir=/usr/local/firebird/dev/client-java/output/db tests-report-html
-->
    <property name="test.db.host" value="localhost"/>
    <property name="test.db.port" value="3050"/>
    <property name="test.db.dir" value="${module.output}/db"/>
    <property name="test.db.lc_ctype" value="NONE"/>


    <property name="packages" value="org.firebirdsql.*"/>

    <property name="build.compiler" value="classic"/>

    <!--available property="jdk1.3+" classname="java.lang.StrictMath" /-->

    <available property="j2ee.present" file="${jboss.source.root}" />

    <path id="javac.j2ee.classpath">
      <pathelement location="${module.thirdparty}/jaas.jar"/>
    </path>

    <path id="javac.driver.classpath">
      <path refid="javac.j2ee.classpath"/>
      <pathelement location="${build.j2ee}"/>
      <pathelement location="${module.thirdparty}/jdbc-3_0-pfd2-classes.zip"/>
      <pathelement location="${build.concurrent}"/>
      <!--pathelement location="${module.thirdparty}/concurrent.jar"/-->
      <pathelement location="${module.thirdparty}/log4j-core.jar"/>
    </path>

    <path id="javac.pool.classpath">
      <path refid="javac.driver.classpath"/>
      <pathelement location="${build.classes}"/>
    </path>

    <path id="javac.test.classpath">
      <path refid="javac.driver.classpath"/>
      <pathelement location="${build.classes}"/>
      <pathelement location="${build.pool}"/>
      <pathelement location="${lib.dir}/junit.jar"/>
    </path>

    <path id="javac.examples.classpath">
      <path refid="javac.driver.classpath"/>
      <pathelement location="${build.classes}"/>
      <pathelement location="${build.pool}"/>
    </path>

    <!--
    Determin if native code has been built and if so set 'native_library_present' property
    -->
    <property name="native.library.name" value="jaybird"/>
    <property name="native.library.location" value="${module.output}/native"/>
    <condition property="native_library_present">
        <available file="${native.library.location}/${native.library.name}.dll"/>
    </condition>
    <condition property="native_library_present">
        <available file="${native.library.location}/lib${native.library.name}.so"/>
    </condition>
    <condition property="no_type2_tests">
        <not><isset property="native_library_present"/></not>
    </condition>

  </target>

  <target name="copy_native_to_test_path" depends="compile-native">
    <copy file="${native.library.location}/${native.library.name}.dll" tofile="${module.output}/${native.library.name}.dll" failonerror="false" overwrite="true" />
    <copy file="${native.library.location}/lib${native.library.name}.so" tofile="${module.output}/lib${native.library.name}.so" failonerror="false" overwrite="true" />
  </target>

  <!-- =================================================================== -->
  <!-- Fix cr-lf                                                           -->
  <!-- =================================================================== -->
  <target name="pretty" depends="init">
    <fixcrlf srcDir="${source.java}"
       includes="**/*.java,**/*.xml,**/*.sh"
       cr="remove"
       tab="remove"
       tablength="4"
       eof="remove"/>
  </target>

  <target name="checkout-j2ee" depends="init" unless="j2ee.present">
    <property name="jboss.cvsroot"
                  value=":pserver:anonymous@cvs.sourceforge.net:/cvsroot/jboss"/>
    <property name="jboss.cvstag" value="Branch_3_2"/>
    <!--property name="jboss.cvsdate" value="2002-07-29 13:00 +0000"/-->

    <cvspass cvsroot="${jboss.cvsroot}"
                 password=""
                 passfile=".cvspass"/>

    <mkdir dir="${jboss.source.root}"/>
    <cvs cvsRoot="${jboss.cvsroot}"
         passfile=".cvspass"
         command="-q checkout -P"
         tag="${jboss.cvstag}"
         dest="${jboss.source.root}"
         package="jboss-j2ee"/>
  </target>


  <!-- =================================================================== -->
  <!-- Compiles the source code                                            -->
  <!-- =================================================================== -->
  <target name="compile" depends="compile-concurrent, compile-j2ee, compile-driver, compile-pool, compile-tests, compile-etc, compile-examples, compile-resources, compile-stylesheets"/>

  <!-- calling this unjar a compile is stretching the truth a bit-->
  <target name="compile-concurrent" depends="init">
    <mkdir dir="${build.concurrent}"/>

    <unjar src="${module.thirdparty}/concurrent.jar"
           dest="${build.concurrent}">
      <patternset>
        <include name="EDU/oswego/cs/dl/util/concurrent/FIFOSemaphore.class"/>
        <include name="EDU/oswego/cs/dl/util/concurrent/FIFOSemaphore$FIFOWaitQueue.class"/>
        <include name="EDU/oswego/cs/dl/util/concurrent/QueuedSemaphore.class"/>
        <include name="EDU/oswego/cs/dl/util/concurrent/QueuedSemaphore$WaitQueue.class"/>
        <include name="EDU/oswego/cs/dl/util/concurrent/QueuedSemaphore$WaitQueue$WaitNode.class"/>
        <include name="EDU/oswego/cs/dl/util/concurrent/Semaphore.class"/>
        <include name="EDU/oswego/cs/dl/util/concurrent/Sync.class"/>

        <include name="EDU/oswego/cs/dl/util/concurrent/LinkedQueue.class"/>
        <include name="EDU/oswego/cs/dl/util/concurrent/LinkedNode.class"/>
        <include name="EDU/oswego/cs/dl/util/concurrent/Channel.class"/>
        <include name="EDU/oswego/cs/dl/util/concurrent/Puttable.class"/>
        <include name="EDU/oswego/cs/dl/util/concurrent/Takable.class"/>
      </patternset>
    </unjar>
  </target>


  <target name="compile-native" depends="init">
    <ant antfile="build_native.xml"/>
  </target>

  <target name="compile-j2ee" depends="init, checkout-j2ee">
    <mkdir dir="${build.j2ee}"/>

    <javac destdir="${build.j2ee}"
           target="1.2"
           debug="on"
           deprecation="on"
           optimize="on">
      <classpath refid="javac.j2ee.classpath"/>
      <src path="${jboss.source.root}/jboss-j2ee/src/main"/>

      <include name="javax/resource/*.java"/>
      <include name="javax/resource/cci/ConnectionSpec.java"/>
      <include name="javax/resource/cci/LocalTransaction.java"/>
      <include name="javax/resource/spi/**/*.java"/>
      <include name="javax/transaction/xa/*.java"/>
      <include name="javax/sql/*.java"/>
    </javac>
  </target>


  <target name="compile-examples">
  	<mkdir dir="${build.examples}"/>
    <javac srcdir="${source.examples}"
           destdir="${build.examples}"
           target="1.2"
           debug="on"
           deprecation="on"
           optimize="on"
           includes="*"
           excludes="**/temp*"
    >
      <classpath refid="javac.examples.classpath"/>
    </javac>
  </target>

  <target name="compile-driver" depends="compile-j2ee">
    <mkdir dir="${build.classes}"/>
    <javac srcdir="${source.java}"
           destdir="${build.classes}"
           target="1.2"
           debug="on"
           deprecation="on"
           optimize="on"
           includes="org/**"
           excludes="**/temp*"
    >
      <classpath refid="javac.driver.classpath"/>
    </javac>
  </target>

  <target name="compile-pool" depends="compile-driver">
    <mkdir dir="${build.pool}"/>
    <javac srcdir="${source.pool}"
           destdir="${build.pool}"
           target="1.2"
           debug="on"
           deprecation="on"
           optimize="on"
           includes="org/**"
           excludes="**/temp*"
    >
      <classpath refid="javac.pool.classpath"/>
    </javac>
  </target>

  <target name="compile-tests" depends="compile-pool">
    <mkdir dir="${build.test}"/>
    <javac srcdir="${source.test}"
           destdir="${build.test}"
           target="1.2"
           debug="on"
           deprecation="on"
           optimize="on"
           includes="org/**"
           excludes="**/temp*"
    >
      <classpath refid="javac.test.classpath"/>
    </javac>

    <copy todir="${build.test}" filtering="no">
      <fileset dir="${source.test}">
         <include name="**/*.properties"/>
      </fileset>
    </copy>

  </target>

  <!-- Compile etc files (manifest) -->
  <target name="compile-etc" depends="init">
    <mkdir dir="${build.etc}"/>
    <copy todir="${build.etc}" filtering="yes">
      <fileset dir="${source.etc}">
         <include name="default.mf"/>
         <include name="JDBC20_conformance.html"/>
         <include name="faq.html"/>
         <include name="FAQ.txt"/>
         <include name="release_notes.html"/>
      </fileset>
      <filterset>
        <filter token="java.vm.version" value="${java.vm.version}"/>
        <filter token="java.vm.vendor" value="${java.vm.vendor}"/>

        <filter token="specification.title" value="${specification.title}"/>
        <filter token="specification.version" value="${specification.version}"/>
        <filter token="specification.vendor" value="${specification.vendor}"/>

        <filter token="implementation.title" value="${implementation.title}"/>
        <filter token="implementation.url" value="${implementation.url}"/>
        <filter token="implementation.version" value="${implementation.version}"/>
        <filter token="implementation.vendor" value="${implementation.vendor}"/>
        <filter token="implementation.vendor.id" value="${implementation.vendor.id}"/>

      </filterset>
    </copy>
  </target>

  <!-- Compile resource files -->
  <target name="compile-resources" depends="init">
    <mkdir dir="${build.resources}"/>
    <copy todir="${build.resources}" filtering="no">
      <fileset dir="${source.resources}">
         <include name="**/*"/>
      </fileset>
    </copy>
  </target>

  <!-- Compile stylesheets -->
  <target name="compile-stylesheets" depends="init">
    <mkdir dir="${build.stylesheets}"/>
    <copy todir="${build.stylesheets}" filtering="yes">
      <fileset dir="${source.stylesheets}">
         <include name="**/*"/>
      </fileset>
    </copy>
  </target>

  <!-- =================================================================== -->
  <!-- Creates the jar archives                                            -->
  <!-- =================================================================== -->
  <target name="jars" depends="jar-concurrent, jar-j2ee, jar-jmx, rar, jar-test"/>

  <target name="jar-concurrent" depends="compile">

    <mkdir dir="${build.lib}"/>
    <jar jarfile="${build.lib}/mini-concurrent.jar">
       <fileset dir="${build.concurrent}">
         <include name="EDU/**"/>
       </fileset>
    </jar>
  </target>

  <target name="jar-j2ee" depends="compile">

    <mkdir dir="${build.lib}"/>
    <jar jarfile="${build.lib}/mini-j2ee.jar">
       <fileset dir="${build.j2ee}">
         <include name="javax/**"/>
       </fileset>
    </jar>
  </target>

  <target name="jar-ra" depends="compile">

    <mkdir dir="${build.lib}"/>
    <jar jarfile="${build.lib}/firebirdsql.jar" manifest="${build.etc}/default.mf">
       <fileset dir="${build.classes}">
         <include name="org/firebirdsql/**"/>
       </fileset>
       <fileset dir="${build.resources}">
         <exclude name="log4j.properties"/>
         <include name="*.properties"/>
       </fileset>
    </jar>

    <jar jarfile="${build.lib}/firebirdsql-pool.jar" manifest="${build.etc}/default.mf">
       <fileset dir="${build.pool}">
         <include name="org/firebirdsql/**"/>
       </fileset>
    </jar>

    <jar jarfile="${build.lib}/firebirdsql-full.jar">
       <fileset dir="${build.classes}">
         <include name="org/firebirdsql/**"/>
       </fileset>
       <fileset dir="${build.pool}">
         <include name="org/firebirdsql/**"/>
       </fileset>
       <fileset dir="${build.resources}">
         <exclude name="log4j.properties"/>
         <include name="*.properties"/>
       </fileset>
       <fileset dir="${build.j2ee}">
         <include name="javax/**"/>
       </fileset>
       <fileset dir="${build.concurrent}">
         <include name="EDU/**"/>
       </fileset>
    </jar>

  </target>

  <target name="jar-test" depends="compile">

    <mkdir dir="${build.lib}"/>
    <jar jarfile="${build.lib}/firebirdsql-test.jar" manifest="${build.etc}/default.mf">
       <fileset dir="${build.test}">
         <include name="org/firebirdsql/**"/>
       </fileset>
       <fileset dir="${build.resources}">
         <include name="*.properties"/>
       </fileset>
    </jar>
  </target>


  <!-- =================================================================== -->
  <!-- Creates the jmx-jar archives                                            -->
  <!-- =================================================================== -->
  <target name="jar-jmx" depends="compile">

    <mkdir dir="${build.lib}"/>
    <jar jarfile="${build.lib}/firebirdjmx.jar" manifest="${build.etc}/default.mf">
       <fileset dir="${build.classes}">
         <include name="org/firebirdsql/**"/>
         <exclude name="**/jca/**"/>
         <exclude name="**/jdbc/**"/>
       </fileset>
       <fileset dir="${build.resources}">
         <include name="*.properties"/>
       </fileset>
    </jar>
  </target>



  <!-- =================================================================== -->
  <!-- Creates the rar archives                                            -->
  <!-- =================================================================== -->
  <target name="rar" depends="jar-ra">
    <jar jarfile="${build.lib}/firebirdsql.rar" manifest="${build.etc}/default.mf">
      <fileset dir="${build.lib}">
        <include name="firebirdsql.jar"/>
      </fileset>
      <fileset dir="${build.resources}">
        <include name="META-INF/ra.xml"/>
      </fileset>
    </jar>
  </target>

  <!-- =================================================================== -->
  <!-- deploys the rar and example ConnectionFactoryLoader to              -->
  <!-- (my location of) JBoss                                              -->
  <!-- =================================================================== -->
  <target name="deploy-rar" depends="rar">
    <delete file="${jboss.deploy.dir}/firebird-service.xml"/>
    <delete file="${jboss.deploy.dir}/firebirdsql.rar"/>
    <!--sleep seconds="2"/coming with ant 1.4.1-->
    <copy todir="${jboss.deploy.dir}" file="${build.lib}/firebirdsql.rar"/>
    <!--copy todir="${jboss.deploy.dir}" file="${build.dir}/firebird-service.xml"/-->
  </target>


  <!-- =================================================================== -->
  <!-- runs the junit tests                                                -->
  <!-- =================================================================== -->

  <target name="all-tests-pure-java" depends="jars">

   <!-- Override JUnit defaults -->


    <!--create local db dir, if you are running on remote machine
      you must provide it yourself -->
    <mkdir dir="${module.output}/db"/>
    <mkdir dir="${build.reports.pure_java}"/>
    <mkdir dir="${build.testlog}"/>
    <junit dir="${module.output}"
	   printsummary="${junit.printsummary}"
	   haltonerror="${junit.haltonerror}"
	   haltonfailure="${junit.haltonfailure}"
	   fork="${junit.fork}"
	   timeout="${junit.timeout}"
	   jvm="${junit.jvm}">

      <jvmarg value="${junit.jvm.options}"/>
      <sysproperty key="jbosstest.deploy.dir" file="${build.lib}"/>
      <sysproperty key="log4j.properties" file="${build.resources}/log4j.properties"/>
      <sysproperty key="test.db.dir" value="${test.db.dir}"/>
      <sysproperty key="test.db.host" value="${test.db.host}"/>
      <sysproperty key="test.db.port" value="${test.db.port}"/>
      <sysproperty key="test.db.lc_ctype" value="${test.db.lc_ctype}"/>
      <sysproperty key="test.gds_type" value="PURE_JAVA"/>

      <classpath>
        <!-- pathelement location="${build.classes}"/ -->
        <!-- pathelement location="${build.test}"/ -->
        <!-- pathelement location="${build.resources}"/ -->

        <pathelement location="${build.lib}/firebirdsql.jar"/>
        <pathelement location="${build.lib}/firebirdsql-test.jar"/>
        <pathelement location="${build.lib}/mini-concurrent.jar"/>
        <pathelement location="${build.lib}/mini-j2ee.jar"/>
        <pathelement location="${build.lib}/firebirdsql-test.jar"/>


        <pathelement location="${lib.dir}/ant.jar"/>
        <pathelement location="${lib.dir}/optional.jar"/>
        <path refid="javac.test.classpath"/>
      </classpath>

      <formatter type="${junit.formatter.type}"
		 usefile="${junit.formatter.usefile}"/>

      <batchtest todir="${build.reports.pure_java}"
		 haltonerror="${junit.batchtest.haltonerror}"
		 haltonfailure="${junit.batchtest.haltonfailure}"
		 fork="${junit.fork}">

        <fileset dir="${build.test}">
          <include name="**/Test*.class"/>
          <exclude name="**/ngds/Test*.class"/>
          <exclude name="**/TestAll.class"/>
          <exclude name="**/TestXABase*.class"/>
          <exclude name="**/TestConst.class"/>
          <exclude name="**/*$$*.class"/>

        </fileset>
      </batchtest>
    </junit>
  </target>



  <target name="all-tests-native" depends="jars,compile-native,copy_native_to_test_path">

   <!-- Override JUnit defaults -->

    <!--create local db dir, if you are running on remote machine
      you must provide it yourself -->
    <mkdir dir="${module.output}/db"/>
    <mkdir dir="${build.reports.native}"/>
    <mkdir dir="${build.testlog}"/>
    <junit dir="${module.output}"
	   printsummary="${junit.printsummary}"
	   haltonerror="${junit.haltonerror}"
	   haltonfailure="${junit.haltonfailure}"
	   fork="${junit.fork}"
	   timeout="${junit.timeout}"
	   jvm="${junit.jvm}">

      <jvmarg value="${junit.jvm.options}"/>
      <sysproperty key="jbosstest.deploy.dir" file="${build.lib}"/>
      <sysproperty key="log4j.properties" file="${build.resources}/log4j.properties"/>
      <sysproperty key="test.db.dir" value="${test.db.dir}"/>
      <sysproperty key="test.db.host" value="${test.db.host}"/>
      <sysproperty key="test.db.port" value="${test.db.port}"/>
      <sysproperty key="test.db.lc_ctype" value="${test.db.lc_ctype}"/>
      <sysproperty key="test.gds_type" value="NATIVE"/>

      <classpath>
        <!-- pathelement location="${build.classes}"/ -->
        <!-- pathelement location="${build.test}"/ -->
        <!-- pathelement location="${build.resources}"/ -->

        <pathelement location="${build.lib}/firebirdsql.jar"/>
        <pathelement location="${build.lib}/firebirdsql-test.jar"/>
        <pathelement location="${build.lib}/mini-concurrent.jar"/>
        <pathelement location="${build.lib}/mini-j2ee.jar"/>
        <pathelement location="${build.lib}/firebirdsql-test.jar"/>


        <pathelement location="${lib.dir}/ant.jar"/>
        <pathelement location="${lib.dir}/optional.jar"/>
        <path refid="javac.test.classpath"/>
      </classpath>

      <formatter type="${junit.formatter.type}"
		 usefile="${junit.formatter.usefile}"/>

      <batchtest todir="${build.reports.native}"
		 haltonerror="${junit.batchtest.haltonerror}"
		 haltonfailure="${junit.batchtest.haltonfailure}"
		 fork="${junit.fork}">

        <fileset dir="${build.test}">
          <include name="**/Test*.class"/>
          <exclude name="**/jgds/Test*.class"/>
          <exclude name="**/TestAll.class"/>
          <exclude name="**/TestXABase*.class"/>
          <exclude name="**/TestConst.class"/>
          <exclude name="**/*$$*.class"/>
          <exclude name="**/ngds/TestSpecialEmbeddedServerUrls.class"/>
          <exclude name="**/ngds/TestServicesAPI.class"/>
	      <exclude name="**/ngds/TestJaybirdBlobBackupProblem.class"/>

        </fileset>
      </batchtest>
    </junit>
  </target>

  <target name="all-tests-embedded" depends="jars,compile-native,copy_native_to_test_path">

   <!-- Override JUnit defaults -->
    <property name="test.gds_type" value="EMBEDDED"/>

    <!--create local db dir, if you are running on remote machine
      you must provide it yourself -->
    <mkdir dir="${module.output}/db"/>
    <mkdir dir="${build.reports.embedded}"/>
    <mkdir dir="${build.testlog}"/>
    <junit dir="${module.output}"
	   printsummary="${junit.printsummary}"
	   haltonerror="${junit.haltonerror}"
	   haltonfailure="${junit.haltonfailure}"
	   fork="${junit.fork}"
	   timeout="${junit.timeout}"
	   jvm="${junit.jvm}">

      <jvmarg value="${junit.jvm.options}"/>
      <sysproperty key="jbosstest.deploy.dir" file="${build.lib}"/>
      <sysproperty key="log4j.properties" file="${build.resources}/log4j.properties"/>
      <sysproperty key="test.db.dir" value="${test.db.dir}"/>
      <sysproperty key="test.db.host" value="${test.db.host}"/>
      <sysproperty key="test.db.port" value="${test.db.port}"/>
      <sysproperty key="test.db.lc_ctype" value="${test.db.lc_ctype}"/>
      <sysproperty key="test.gds_type" value="EMBEDDED"/>

      <classpath>
        <!-- pathelement location="${build.classes}"/ -->
        <!-- pathelement location="${build.test}"/ -->
        <!-- pathelement location="${build.resources}"/ -->

        <pathelement location="${build.lib}/firebirdsql.jar"/>
        <pathelement location="${build.lib}/firebirdsql-test.jar"/>
        <pathelement location="${build.lib}/mini-concurrent.jar"/>
        <pathelement location="${build.lib}/mini-j2ee.jar"/>
        <pathelement location="${build.lib}/firebirdsql-test.jar"/>


        <pathelement location="${lib.dir}/ant.jar"/>
        <pathelement location="${lib.dir}/optional.jar"/>
        <path refid="javac.test.classpath"/>
      </classpath>

      <formatter type="${junit.formatter.type}"
		 usefile="${junit.formatter.usefile}"/>

      <batchtest todir="${build.reports.embedded}"
		 haltonerror="${junit.batchtest.haltonerror}"
		 haltonfailure="${junit.batchtest.haltonfailure}"
		 fork="${junit.fork}">

        <fileset dir="${build.test}">
          <include name="**/Test*.class"/>
          <exclude name="**/jgds/Test*.class"/>
          <exclude name="**/TestAll.class"/>
          <exclude name="**/TestXABase*.class"/>
          <exclude name="**/TestConst.class"/>
          <exclude name="**/*$$*.class"/>

        </fileset>
      </batchtest>
    </junit>
  </target>

  <!--
     | Run a single testcase by specifing the part of the test name after Test before the .class
     | of the unit test using the test property, -Dtest=Gds one-test
     | Here you specify the testcase class, not the directory
   -->

  <target name="one-test-pure-java" depends="jars"
	  description="Execute a single test.">
    <mkdir dir="${test.db.dir}"/>
    <mkdir dir="${build.reports.pure_java}"/>
    <mkdir dir="${build.testlog}"/>
    <junit dir="${module.output}"
	   printsummary="${junit.printsummary}"
	   haltonerror="${junit.haltonerror}"
	   haltonfailure="${junit.haltonfailure}"
	   fork="${junit.fork}"
	   timeout="${junit.timeout}"
	   jvm="${junit.jvm}">

      <jvmarg value="${junit.jvm.options}"/>
      <sysproperty key="jbosstest.deploy.dir" file="${build.lib}"/>
      <sysproperty key="log4j.properties" file="${build.resources}/log4j.properties"/>
      <sysproperty key="test.db.dir" value="${test.db.dir}"/>
      <sysproperty key="test.db.host" value="${test.db.host}"/>
      <sysproperty key="test.db.port" value="${test.db.port}"/>
      <sysproperty key="test.db.lc_ctype" value="${test.db.lc_ctype}"/>

      <classpath>
        <pathelement location="${build.classes}"/>
        <pathelement location="${build.test}"/>
        <pathelement location="${build.resources}"/>
        <pathelement location="${lib.dir}/ant.jar"/>
        <pathelement location="${lib.dir}/optional.jar"/>
        <path refid="javac.test.classpath"/>
      </classpath>

      <formatter type="${junit.formatter.type}"
		 usefile="${junit.formatter.usefile}"/>

      <batchtest todir="${build.reports.pure_java}"
		 haltonerror="${junit.batchtest.haltonerror}"
		 haltonfailure="${junit.batchtest.haltonfailure}"
		 fork="${junit.batchtest.fork}">

        <fileset dir="${build.test}">
          <include name="org/firebirdsql/*/Test${test}*.class"/>
        </fileset>
      </batchtest>
    </junit>
  </target>

  <target name="one-test-native" depends="jars"
	  description="Execute a single test.">
    <mkdir dir="${test.db.dir}"/>
    <mkdir dir="${build.reports.native}"/>
    <mkdir dir="${build.testlog}"/>
    <junit dir="${module.output}"
	   printsummary="${junit.printsummary}"
	   haltonerror="${junit.haltonerror}"
	   haltonfailure="${junit.haltonfailure}"
	   fork="${junit.fork}"
	   timeout="${junit.timeout}"
	   jvm="${junit.jvm}">

      <jvmarg value="${junit.jvm.options}"/>
      <sysproperty key="jbosstest.deploy.dir" file="${build.lib}"/>
      <sysproperty key="log4j.properties" file="${build.resources}/log4j.properties"/>
      <sysproperty key="test.db.dir" value="${test.db.dir}"/>
      <sysproperty key="test.db.host" value="${test.db.host}"/>
      <sysproperty key="test.db.port" value="${test.db.port}"/>
      <sysproperty key="test.db.lc_ctype" value="${test.db.lc_ctype}"/>

      <classpath>
        <pathelement location="${build.classes}"/>
        <pathelement location="${build.test}"/>
        <pathelement location="${build.resources}"/>
        <pathelement location="${lib.dir}/ant.jar"/>
        <pathelement location="${lib.dir}/optional.jar"/>
        <path refid="javac.test.classpath"/>
      </classpath>

      <formatter type="${junit.formatter.type}"
		 usefile="${junit.formatter.usefile}"/>

      <batchtest todir="${build.reports.native}"
		 haltonerror="${junit.batchtest.haltonerror}"
		 haltonfailure="${junit.batchtest.haltonfailure}"
		 fork="${junit.batchtest.fork}">

        <fileset dir="${build.test}">
          <include name="org/firebirdsql/*/Test${test}*.class"/>
        </fileset>
      </batchtest>
    </junit>
  </target>

  <target name="one-test-embedded" depends="jars"
	  description="Execute a single test.">
    <mkdir dir="${test.db.dir}"/>
    <mkdir dir="${build.reports.embedded}"/>
    <mkdir dir="${build.testlog}"/>
    <junit dir="${module.output}"
	   printsummary="${junit.printsummary}"
	   haltonerror="${junit.haltonerror}"
	   haltonfailure="${junit.haltonfailure}"
	   fork="${junit.fork}"
	   timeout="${junit.timeout}"
	   jvm="${junit.jvm}">

      <jvmarg value="${junit.jvm.options}"/>
      <sysproperty key="jbosstest.deploy.dir" file="${build.lib}"/>
      <sysproperty key="log4j.properties" file="${build.resources}/log4j.properties"/>
      <sysproperty key="test.db.dir" value="${test.db.dir}"/>
      <sysproperty key="test.db.host" value="${test.db.host}"/>
      <sysproperty key="test.db.port" value="${test.db.port}"/>
      <sysproperty key="test.db.lc_ctype" value="${test.db.lc_ctype}"/>

      <classpath>
        <pathelement location="${build.classes}"/>
        <pathelement location="${build.test}"/>
        <pathelement location="${build.resources}"/>
        <pathelement location="${lib.dir}/ant.jar"/>
        <pathelement location="${lib.dir}/optional.jar"/>
        <path refid="javac.test.classpath"/>
      </classpath>

      <formatter type="${junit.formatter.type}"
		 usefile="${junit.formatter.usefile}"/>

      <batchtest todir="${build.reports.embedded}"
		 haltonerror="${junit.batchtest.haltonerror}"
		 haltonfailure="${junit.batchtest.haltonfailure}"
		 fork="${junit.batchtest.fork}">

        <fileset dir="${build.test}">
          <include name="org/firebirdsql/*/Test${test}*.class"/>
        </fileset>
      </batchtest>
    </junit>
  </target>



  <target name="tests-report-html-pure-java" depends="all-tests-pure-java">
    <mkdir dir="${build.reports.pure_java}/html"/>

    <junitreport todir="${build.reports.pure_java}">
      <fileset dir="${build.reports.pure_java}">
        <include name="TEST-*.xml"/>
      </fileset>
      <report format="frames"
              todir="${build.reports.pure_java}/html"
              styledir="${build.stylesheets}"
      />
    </junitreport>
  </target>

  <target name="tests-report-html-native" depends="all-tests-native">
    <mkdir dir="${build.reports.native}/html"/>

    <junitreport todir="${build.reports.native}">
      <fileset dir="${build.reports.native}">
        <include name="TEST-*.xml"/>
      </fileset>
      <report format="frames"
              todir="${build.reports.native}/html"
              styledir="${build.stylesheets}"
      />
    </junitreport>
  </target>

  <target name="tests-report-html-embedded" depends="all-tests-embedded">
    <mkdir dir="${build.reports.embedded}/html"/>

    <junitreport todir="${build.reports.embedded}">
      <fileset dir="${build.reports.embedded}">
        <include name="TEST-*.xml"/>
      </fileset>
      <report format="frames"
              todir="${build.reports.embedded}/html"
              styledir="${build.stylesheets}"
      />
    </junitreport>
  </target>

  <target name="tests-report-html-all" depends="tests-report-html-pure-java,tests-report-html-native,tests-report-html-embedded">
  </target>

  <!-- =================================================================== -->
  <!-- Creates the API documentation                                       -->
  <!-- =================================================================== -->
  <target name="javadocs" depends="init">
    <mkdir dir="${build.docs}"/>
    <javadoc packagenames="${packages}"
             sourcepath="${source.java}"
             destdir="${build.docs}"
             author="true"
             version="true"
             windowtitle="${Name} API"
             doctitle="${Name}"
             extdirs="${module.thirdparty}"
             bottom="Copyright &#169; 2001 David Jencks and other authors. All rights reserved.">
      <classpath refid="javac.classpath"/>
    </javadoc>
  </target>

  <!-- =================================================================== -->
  <!-- Creates the html documentation                                      -->
  <!-- =================================================================== -->
  <target name="docs" depends="init">

    <!--echo message="Building html documentation. Please wait ..."/-->
<!--    <style  basedir="${source.docs.dir}"
             style="jboss.xsl"
             destdir="${build.docs.dir}"
             includes="jbossdocs.xml"
    />
    <move todir="${build.docs.dir}">
      <fileset dir="${source.java}/build" includes="*.html"/>
    </move>
    <delete file="${build.docs.dir}/jbossdocs.html"/>-->

    <!-- Stylesheets, images, and static HTML -->
 <!--   <copy todir="${build.docs.dir}">
       <fileset dir="${source.java}/docs" excludes="*.xml,*.xsl,**/docbook/**,**/docbookx/**"/>
     </copy>
     -->
  </target>

  <!-- =================================================================== -->
  <!-- Creates the distribution                                            -->
  <!-- =================================================================== -->
  <target name="dist" depends="jars">
    <mkdir dir="${build.dist}"/>
    <zip zipfile="${build.dist}/${Name}-${version.full}.zip">
      <fileset dir="${build.lib}">
        <include name="firebirdsql.rar"/>
        <include name="firebirdsql-test.jar"/>
        <include name="firebirdsql-full.jar"/>
        <include name="firebirdsql.jar"/>
        <include name="firebirdjmx.jar"/>
      </fileset>
      <zipfileset dir="${build.lib}" prefix="lib">
        <include name="mini-j2ee.jar"/>
        <include name="mini-concurrent.jar"/>
      </zipfileset>
      <zipfileset dir="${module.thirdparty}" prefix="lib">
        <include name="log4j-core.jar"/>
        <include name="jaas.jar"/>
      </zipfileset>
      <fileset dir="${module.etc}">
        <include name="*.html"/>
        <include name="FAQ.txt"/>
      </fileset>
      <zipfileset dir="${source.examples}" prefix="examples">
      	<include name="*"/>
      </zipfileset>
    </zip>
  </target>

  <!-- =================================================================== -->
  <!-- Packages the source files with ZIP                                  -->
  <!-- =================================================================== -->
  <target name="src-zip" depends="init">
    <zip zipfile="${Name}-src-${version.full}.zip" basedir="../.." includes="clients/java/**" excludes="clients/java/**.zip"/>
  </target>

  <!-- =================================================================== -->
  <!-- Packages the distribution with ZIP                                  -->
  <!-- =================================================================== -->
  <target name="dist-zip" depends="dist">
    <zip zipfile="${Name}-${version.full}.zip" basedir="${dist.dir}" includes="src/**"/>
  </target>

  <!-- =================================================================== -->
  <!-- Packages the distribution with TAR-GZIP                             -->
  <!-- =================================================================== -->
  <target name="dist-tgz" depends="dist">
    <tar tarfile="${Name}-${version.full}.tar" basedir="${dist.dir}" includes="src/**"/>
    <gzip zipfile="${Name}-${version.full}.tar.gz" src="${Name}-${version}.tar"/>
  </target>

  <!-- =================================================================== -->
  <!-- Cleans up generated stuff                                           -->
  <!-- =================================================================== -->
  <target name="clean" depends="init">
    <delete dir="${module.output}"/>
  </target>

  <!-- =================================================================== -->
  <!-- Total cleanup                                                       -->
  <!-- =================================================================== -->
  <target name="total-clean" depends="clean">
    <delete dir="${jboss.source.root}"/>
    <delete file="${Name}-${version}.zip"/>
    <delete file="${Name}-${version}.tar"/>
    <delete file="${Name}-${version}.tar.gz"/>
  </target>
</project>






