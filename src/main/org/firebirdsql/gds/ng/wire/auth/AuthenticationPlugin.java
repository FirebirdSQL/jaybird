// SPDX-FileCopyrightText: Copyright 2013-2022 Mark Rotteveel
// SPDX-License-Identifier: LGPL-2.1-or-later OR BSD-3-Clause
package org.firebirdsql.gds.ng.wire.auth;

import java.sql.SQLException;

/**
 * Plugin for Firebird authentication.
 *
 * @author Mark Rotteveel
 * @since 3.0
 */
public interface AuthenticationPlugin {

    /**
     * @return Name of the plugin as used by Firebird
     */
    String getName();

    /**
     * Authenticate using the plugin.
     * <p>
     * The data generated by this method should be stored and available for calls from {@link #getClientData()}.
     * </p>
     * <p>
     * The method authenticate may be called multiple times depending on the state of the authentication (as indicated
     * by the returned {@link org.firebirdsql.gds.ng.wire.auth.AuthenticationPlugin.AuthStatus}.
     * </p>
     *
     * @param clientAuthBlock
     *         Client authentication block.
     * @return Status of the authentication
     * @throws SQLException
     *         For authentication failures
     */
    AuthStatus authenticate(ClientAuthBlock clientAuthBlock) throws SQLException;

    /**
     * @return The data generated by a call to {@link #authenticate(ClientAuthBlock)}.
     */
    byte[] getClientData();

    /**
     * Sets data received from the server.
     *
     * @param serverData
     *         Server data
     */
    void setServerData(byte[] serverData);

    /**
     * @return {@code true} if plugin has non-null and non-empty server data
     */
    boolean hasServerData();

    /**
     * @return {@code true} if the plugin generates a session key
     */
    boolean generatesSessionKey();

    /**
     * Session key for encryption.
     *
     * @return Session key
     * @throws SQLException
     *         If there is currently no session key or the authentication plugin doesn't support session key
     *         generation.
     */
    byte[] getSessionKey() throws SQLException;

    /**
     * Status of authentication.
     */
    enum AuthStatus {
        /**
         * Authentication completed.
         */
        AUTH_SUCCESS,
// NOTE: Intentionally commented out but kept to compare with FB, authentication failure should be thrown as an SQLException
//        /**
//         * Authentication failed.
//         */
//        AUTH_FAILED,
        /**
         * Plugin is not able to authenticate using the available data, continue with another plugin.
         */
        AUTH_CONTINUE,
        /**
         * The authentication needs more data to complete (e.g. key exchange/handshake).
         */
        AUTH_MORE_DATA
    }
}
